{"version":3,"sources":["logo.svg","reducer/stockPriceReducer.js","components/StockPrice.js","App.js","service/rest.js","conf/appConf.js","service/StockPriceService.js","sagas/stockPriceSaga.js","sagas/index.js","index.js","reducer/store.js"],"names":["POST_STOCK_PRICE","UPDATE_FIELD","constants","actions","postStockPrice","createAction","updateField","name","val","reducers","state","payload","today","Date","yesterday","setDate","getDate","dd","mm","getMonth","yyyy","getFullYear","randomInt","min","max","Math","ceil","floor","random","initialState","requestDto","identifier","startDateTime","endDateTime","stockPrices","submittedRequest","maxProfit","buyValue","sellValue","processedDateTime","handleActions","ListStockPrices","prices","start","startDate","end","endDate","Object","entries","map","key","value","connectWithLifecycle","dispatch","props","type","onClick","App","className","src","logo","width","alt","StockPrice","handle","response","a","error","status","statusText","json","catch","console","then","url","body","call","method","fetch","JSON","stringify","credentials","headers","StockPriceService","post","stockPrice","select","service","postBuySellStock","data","put","request","takeLatest","stockPriceSagas","fork","sagas","all","store","sageMiddleware","createSagaMiddleware","middleware","applyMiddleware","createStore","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","composeEnhancer","run","configureStore","Index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8612d0f2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","import {createAction, handleActions} from 'redux-actions'\n\nconst POST_STOCK_PRICE='POST_STOCK_PRICE';\nconst UPDATE_FIELD='UPDATE_FIELD';\nexport const constants = {\n    POST_STOCK_PRICE,\n    UPDATE_FIELD\n}\nexport const postStockPrice = createAction(POST_STOCK_PRICE, ()=>({}));\nexport const updateField = createAction(UPDATE_FIELD, (name, val)=>({[name] :val}));\n\nexport const actions = {\n    postStockPrice,\n    updateField\n}\n\nexport const reducers = {\n    [UPDATE_FIELD]: (state, {payload}) => ({ ...state, ...payload, }),\n}\n\nlet today = new Date();\nlet yesterday = new Date(today);\nyesterday.setDate(today.getDate() - 1);\nlet dd = yesterday.getDate();\nlet mm = yesterday.getMonth() + 1;\nlet yyyy = yesterday.getFullYear();\nif (dd < 10) {\n    dd = '0' + dd;\n}\nif (mm < 10) {\n    mm = '0' + mm;\n}\nyesterday = `${yyyy}-${mm}-${dd}`;\n\n\nconst randomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const initialState = {\n    requestDto: {\n        identifier: \"test\",\n        startDateTime: `${yesterday}T10:45:55`,\n        endDateTime: `${yesterday}T11:45:55`,\n        stockPrices: {\n            \"60\" : `${randomInt(0, 100)}`,\n            \"61\" : `${randomInt(0, 100)}`,\n            \"1\" : `${randomInt(0, 100)}`,\n            \"9\" : `${randomInt(0, 100)}`,\n            \"30\" : `${randomInt(0, 100)}`,\n            \"70\" : `${randomInt(0, 100)}`,\n            \"71\" : `${randomInt(0, 100)}`,\n            \"72\" : `${randomInt(0, 100)}`,\n            \"100\" : `${randomInt(0, 100)}`,\n            \"7\" : `${randomInt(0, 100)}`,\n        }\n    },\n    submittedRequest: {},\n    maxProfit: 0,\n    buyValue: 0,\n    sellValue: 0,\n    processedDateTime: \"\"\n}\n\nexport default handleActions(reducers, initialState)","import React from 'react';\nimport { connectWithLifecycle } from 'react-lifecycle-component';\nimport { actions } from '../reducer/stockPriceReducer';\n\nconst StockPriceComponent = ({ ...props}) => {\n    return (\n      <>\n        <input type={\"button\"} onClick={()=> props.postStockPrice()} value={\"Get yesterday's MaxProfit\"}/>\n\n        <h4>Result</h4>\n        <div>\n          Buy value: {props.buyValue} <br/>\n          Sell value: {props.sellValue} <br/>\n          Processed date time: {props.processedDateTime} <br/>\n          <strong>Max Profit: {props.maxProfit}</strong> <br/>\n        </div>\n          {props.stockPrices && <ListStockPrices prices={props.stockPrices} startDate={props.submittedRequest.startDateTime} endDate={props.submittedRequest.endDateTime}/> }\n\n      </>\n    );\n};\n\nconst ListStockPrices = ({prices: stockPrices, startDate: start, endDate: end}) => {\n\n    return (\n        <>\n            <br/><br/>\n            Start Date: {start} <br/>\n            End Date: {end} <br/><br/>\n            <div>Stock Prices</div>\n            <ul>\n            {\n                Object.entries(stockPrices).map(([key, value]) =>\n                    <>\n                        <li>{key} : {value}</li>\n                    </>\n                )\n            }\n            </ul>\n        </>\n\n    );\n\n}\n\nconst mapStateToProps = (state) => {\n    return { ...state };\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    postStockPrice: () => {\n        dispatch(actions.postStockPrice());\n    }\n});\n\nexport default connectWithLifecycle(mapStateToProps, mapDispatchToProps)(StockPriceComponent);","import React from 'react';\nimport logo from './logo.svg';\nimport StockPrice from './components/StockPrice';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} width={\"150\"} className=\"App-logo\" alt=\"logo\" />\n        <StockPrice/>\n        <p>\n            <i>refresh the page to get new set of stock prices</i>\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import \"whatwg-fetch\";\nimport * as conf from \"../conf/appConf\";\n\nasync function handle(response) {\n    let error = response.status < 200 && response.status >= 300 && response.statusText;\n    return await response\n        .json()\n        .catch(error => {\n            console.error(error);\n            return { error: \"Unexpected error\" };\n        })\n        .then(json => {\n            if (!json.error && error) {\n                json.error = error;\n            }\n            if (json.error) {\n                console.error(json.error);\n            }\n            return json;\n        });\n}\n\nexport async function get(url) {\n    const response = await fetch(conf.API_PREFIX + url,{\n        credentials: 'same-origin'\n    });\n    return await handle(response);\n}\n\nexport async function post(url, body) {\n    return await call(url, body, \"post\");\n}\n\nexport async function purge(url, body) {\n    return await call(url, body, \"delete\");\n}\n\nexport async function call(url, body, method) {\n    const response = await fetch(conf.API_PREFIX + url, {\n        method,\n        body: JSON.stringify(body),\n        credentials: 'same-origin',\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    });\n    return await handle(response);\n}","export const API_PREFIX=\"\";","import {get, post, purge} from \"./rest\";\n\nexport default class StockPriceService {\n\n    static postBuySellStock(requestDto) {\n        return post(`/stockprice/bestvalue`, requestDto);\n    }\n\n}","import {call, put, fork, takeLatest, select } from \"redux-saga/effects\";\nimport {constants, actions} from \"../reducer/stockPriceReducer\";\nimport service from \"../service/StockPriceService\";\n\nfunction* stockPrice() {\n    let requestDto = yield select(state => state.requestDto);\n    let data = yield call(service.postBuySellStock, requestDto);\n\n    if (!data.error) {\n        yield put(actions.updateField('submittedRequest', requestDto));\n        yield put(actions.updateField('maxProfit', data.maxProfit));\n        yield put(actions.updateField('buyValue', data.buyValue));\n        yield put(actions.updateField('sellValue', data.sellValue));\n        yield put(actions.updateField('processedDateTime', data.processedDateTime));\n        yield put(actions.updateField('stockPrices', data.request.stockPrices));\n    }\n}\n\nfunction* postStockPrice() {\n    yield takeLatest(constants.POST_STOCK_PRICE, stockPrice);\n}\n\nexport const stockPriceSagas = [\n    fork(postStockPrice)\n];","import { all } from 'redux-saga/effects';\nimport { stockPriceSagas } from './stockPriceSaga'\n\nexport default function* sagas() {\n    yield all([\n        ...stockPriceSagas\n    ]);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport configureStore from './reducer/store';\nimport {initialState} from \"./reducer/stockPriceReducer\";\nimport { Provider } from 'react-redux';\n\nexport const store = configureStore(initialState);\n\nexport let Index = props => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(<Index/>, document.getElementById('root'));","import {applyMiddleware, createStore, compose} from 'redux';\nimport  createSagaMiddleware from 'redux-saga';\nimport reducers from \"./stockPriceReducer\";\nimport sagas from '../sagas';\n\nconst composeEnhancer = middleware => {\n  return (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose)(middleware);\n}\n\nexport default function configureStore(initialState) {\n  const sageMiddleware = createSagaMiddleware();\n  const middleware = applyMiddleware(sageMiddleware);\n\n  const store = createStore(reducers, initialState, composeEnhancer(middleware));\n\n  sageMiddleware.run(sagas);\n\n  return store;\n\n}\n\n"],"sourceRoot":""}